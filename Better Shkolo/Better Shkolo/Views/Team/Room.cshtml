<h1 style="text-align: center;">@ViewBag.roomId</h1>

<div video-grid>
</div>
<style>
    div[video-grid]{
        display: grid;
        grid-template-columns: repeat(auto-fit, 300px);
        grid-auto-rows: 300px;
        gap: 25px;
    }

    div[video-grid] > video{
        width: 100%; height: 100%;
        object-fit: cover;
    }
</style>
<script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
<script src="https://unpkg.com/peerjs@1.5.2/dist/peerjs.min.js"></script>
<script>
    const ROOM_ID = '@ViewBag.roomId';
    let userId = '@ViewBag.userId'
    let localStream = null
    const Peers = {}

    const connection = new signalR.HubConnectionBuilder().withUrl("/Team/meeting").build();

    const myPeer = new Peer();

    myPeer.on('open', id => {
        const startSignalR = async () => {
            await connection.start();
            await connection.invoke("JoinRoom", ROOM_ID, userId)
        };
        startSignalR();
    });

    const videoGrid = document.querySelector('[video-grid]')
    const myVideo = document.createElement('video')
    myVideo.muted = true;

    navigator.mediaDevices.getUserMedia({
        audio: true,
        video: true
    }).then(stream => {
        addVideoStream(myVideo, stream)

        localStream = stream
    });

    connection.on('user-connected', id => {
        console.log('User connected:' + userId)

        connectNewUser(id, localStream)
    })

    connection.on('user-disconnected', id => {
        console.log('User disconnected:' + userId)

        if (Peers[id]) Peers[id].close();
    })

    myPeer.on('call', call => {
        call.answer(localStream)

        const userVideo = document.createElement('video')
        call.on('stream', userVideoStream => {
            addVideoStream(userVideo, userVideoStream)
        })
    })

    const addVideoStream = (video, stream) => {
        video.srcObject = stream;
        video.addEventListener('loadedmetadata', () => {
            video.play()
        })

        videoGrid.appendChild(video)
    }

    const connectNewUser = (userId, localStream) => {
        const userVideo = document.createElement('video')
        const call = myPeer.call(userId, localStream)

        call.on('stream', userVideoStream => {
            addVideoStream(userVideo, userVideoStream)
        })

        call.on('close', () => {
            userVideo.remove()
        })

        Peers[userId] = call
    }
</script>